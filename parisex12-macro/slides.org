#+TITLE: Métaprogrammation en Elixir
#+SUBTITLE: /Une introduction naïve/
#+DATE: @@latex:{\color{BlueB}@@\textbf{Paris.ex 12} - Mai 2019@@latex:}@@
#+AUTHOR: Xavier Van de Woestyne \linebreak ~xaviervdw@gmail.com~ - [[margo.com][margo.com]]
#+EMAIL: xaviervdw@gmail.com
#+startup: beamer
#+LaTeX_CLASS: beamer
#+LaTeX_CLASS_options: [allowframebreaks, aspectratio=169]
#+LaTeX_HEADER: \usepackage[backend=biber]{biblatex}
#+LaTeX_HEADER: \usepackage{listings}
#+LaTeX_HEADER: \bibliography{bibliography.bib}
#+LaTeX_HEADER: \usefonttheme{serif}
#+LaTeX_HEADER: \definecolor{BlueA}{HTML}{031A23}
#+LaTeX_HEADER: \definecolor{BlueB}{HTML}{137A86}
#+LaTeX_HEADER: \definecolor{BlueC}{HTML}{50A5A6}
#+LaTeX_HEADER: \definecolor{LightG}{HTML}{c0c0c0}
#+LaTeX_HEADER: \setbeamercolor{title}{fg=BlueB}
#+LaTeX_HEADER: \setbeamercolor{frametitle}{fg=BlueB}
#+LaTeX_HEADER: \setbeamercolor{structure}{fg=BlueB}
#+LaTeX_HEADER: \setbeamercolor{normal text}{fg=BlueA}
#+LaTeX_HEADER: \setbeamertemplate{footline}[frame number]
#+LaTeX_HEADER: \setbeamertemplate{itemize items}[circle]
#+LaTeX_HEADER: \let\footnoterule\relax
#+LaTeX_HEADER: \setbeamercolor{footnote}{fg=BlueB}
#+LaTeX_HEADER: \usepackage{multicol}

#+options: H:2

* Bonjour/Bonsoir !

#+BEGIN_LaTeX
\begin{columns}
    \begin{column}{0.48\textwidth}
        \begin{block}{Xavier Van de Woestyne}
        \begin{itemize}
          \item Bruxelles, Lille, Paris 
          \item \textit{Data Engineer} chez Margo Bank
        \end{itemize}
     \end{block}
     \begin{block}{Réseaux}
        \begin{itemize}
          \item https://xvw.github.io
          \item $vdwxv$ sur Twitter
          \item $xvw$ sur Github/Gitlab
          \item $xvw@merveilles.town$ sur Mastodon\newline
        \end{itemize}
       \end{block}
    \end{column}
    \begin{column}{0.48\textwidth}
     OCaml, F\#, Erlang/Elixir, Kotlin, Io, Ruby, Elm, Racket\newline
     \begin{block}{LilleFP}
     \begin{itemize}
       \item Meetup régulier
       \item Langages applicatifs
       \item Programmation fonctionnelle
       \item Systèmes de types
       \item Fusion de LilleFP, Lille Elixir, Lille Rust et LilleSUG
       \item \textbf{On recrute des speakers !}\newline
     \end{itemize}
     \end{block}
    \end{column}
\end{columns}
#+END_LaTeX

* Après presque 10 ans de Erlang

#+BEGIN_quote 
J'appartiens aux gens qui n'ont pas été particulièrement emballé par Elixir
\linebreak
#+END_quote

- Je préférais la syntaxe de *Erlang* (amoureux de *Prolog*) ;

- j'étais inquiet de la transmissions d'idiomes (Ruby) ;

- donc je trouvais que Elixir ne servait à rien (à tort...).

* Ce qui m'a fait changé d'avis sur Elixir

- *Phoenix* (plus spécifiquement, *Ecto* et *Plug*) ;

- l'unification des types pour les chaines de caractères ;

- les mécanismes de méta-programmation ;

- *mix* ;

- et plus tard : ~gen_stage~ et ~Flow~.

* Sommaire et objectifs

- Comprendre ce qu'est /rapidement/ la méta-programmation ;

- survoler les perspectives qu'Elixir offre pour /méta-programmer/ ;

- observer quelques cas d'usages aux *macros* ;

- conclure sur les usages et avantages.\linebreak


#+BEGIN_quote 
Ceci est introduction naïve ... pour les non-initiés qui, comme le temps est mon ennemi, 
n'évoquera malheureusement pas tout ce qu'il est possible de dire sur la méta-programmation
en Elixir :'(
#+END_quote

- Ceci n'est pas du tout une présentation technique ! (Désolé...)

* Meta-programmation

#+BEGIN_quote 
L'écriture de programme qui manipulent des données *décrivant* elles-mêmes 
des programmes. (d'où le "meta")
#+END_quote


* Meta-programmation


** On peut méta-programmer de plusieurs manières 



- Via la réflexion (implicite ou explicite) ;

- via des raccourcis du langage ;

- via des générateurs de code (par exemple les affreux templates de C++) ;

- via des étapes de compilation (multi-staged metaprogramming) ;

- via des macros ;

- en utilisant un Lisp (aha !)\linebreak


* A quoi ça sert ?

- Limiter le *boilerplate* ;

- limiter le *boilerplate* ;

- limiter le *boilerplate* ;

- étendre le langage (eDSL) ;

- déléguer à une machine des tâches rémanantes.\linebreak

#+BEGIN_quote 
Elixir offre plusieurs outils de méta-programmation !
#+END_quote

* 


** Introspection via ~Module.__info__(subject)~
#+BEGIN_src elixir 

iex> Map.__info__(:functions)
[delete: 2, drop: 2, ... values: 1]
#+END_src

** /Dispatch/ dynamique

#+BEGIN_src elixir 

def call(module) do
  apply(module, function, [args])
end
#+END_src

* Génération de code et dérivation d'interfaces

- *Génération*: Behaviour

- *Dérivation*: Protocol \linebreak

#+BEGIN_quote

Ce sont les manières rapides (et un peu /cheap/) de faire de la
 meta-programmation. 
#+END_quote

* Pré-processeur et macros
  #+Beamer: \framesubtitle{On entre enfin dans le vif du sujet !}

Une manière de *transformer* une unité exécutable *avant* son exécution

* Pré-processeur et macros
  #+Beamer: \framesubtitle{Par exemple}

- ~#include <stdlib.h>~ et ~#define AGE 29~

- Les préprocesseurs CSS (Less, Sass, etc.)

- Les postprocesseurs CSS (aha)

- ~cat myProgram.ex | sed ... | awk ... > myNewProgram.ex~

* Cependant, tout le monde n'agit pas comme des sauvages

- *Lisp* introduit la capacité de manipuler des *quasi-quotations* 
- elles permettent de manipuler des termes du langages ... comme des termes du langages
- c'est en partie possible parce que la grammaire du langage est très simple
- le langage peut être étendu (parfois ... de manière suréaliste, *Racket*).

* Processus de compilation d'un programme Elixir

La grammaire d'Elixir étant plus complexe, on manipule son *AST*.

#+NAME: fig:parsing
#+CAPTION: Processus de compilation
[[./fig/parsing.svg]]

- Il sera possible d'injecter des fragments d'AST avant la phase *d'expansion*
- ces fragments sont des *macros*

* Les macros (enfin !)

- On presque la même sémantique qu'une fonction 

- concrètement, c'est une fonction qui prend des arguments et qui renvoie un fragment d'AST

- résolue avant la phase *d'expansion*

* A quoi ressemble un fragment d'AST ?


#+BEGIN_SRC elixir
1 + 2 + 3 + 4
#+END_SRC

*  

#+NAME: fig:parsing
#+CAPTION: Processus de compilation
[[./fig/ast.svg]]

* 

#+BEGIN_SRC elixir
{:+, [context: Elixir, import: Kernel],
 [
   {:+, [context: Elixir, import: Kernel],
    [{:+, [context: Elixir, import: Kernel], [1, 2]}, 3]},
   4
 ]}
#+END_SRC

C'est un peu ennuyant à écrire à la main...

* Quotations

Heureusement, Elixir permet, comme Lisp, de manipuler des quotations via la macro ~quote/1~

#+BEGIN_SRC elixir

iex> quote do: if(true, do: "foo", else: "bar")

{:if, [
   context: Elixir, import: Kernel], [
     true, [do: "foo", else: "bar"]]}
#+END_SRC

* 

- Les macros permettent d'injecter, à la compilation, un fragment d'AST *syntaxiquement valide*

- Les quotations permettent de simplifier l'écriture de fragments d'AST

- On peut *dé-quoter* (via ~unquote/1~) des identifiant 
  (qui seront injectés en fonction du contexte)

- Utilisées par beaucoup de bibliothèques majeures (Ecto, Plug, ExUnit etc.) pour étendre 
  le langage (via des DSL's)

- Utilisées pour décrire 80% des expressions du langage 

* Un premier exemple : implémentons ~unless~
  #+Beamer: \framesubtitle{Partiellement volé à la documentation d'Elixir}

#+BEGIN_SRC elixir
if(x) == unless(x)
#+END_SRC

* Une première approche au moyen de fonctions

#+BEGIN_SRC elixir
def my_unless(predicate, do: expression) do
  if(!predicate, do: expression)
end
#+END_SRC

#+BEGIN_SRC elixir

iex(2)> my_unless false, do: IO.puts "foo"
foo # Ça semble fonctionner
:ok

iex(1)> my_unless true, do: IO.puts "foo"
foo # Damn, le "foo" s'affiche tout de même !
nil


#+END_SRC

* Utilisation de la paresse pour corriger l'approche fonctionnelle

#+BEGIN_SRC elixir
def my_unless(predicate, do: expression) do
  if(!predicate, do: expression.())
end
#+END_SRC

#+BEGIN_SRC elixir

iex(1)> my_unless false, do: fn() -> IO.puts "foo" end
foo
:ok

iex(2)> my_unless true, do: fn () ->IO.puts "foo" end
nil # Victoire !

#+END_SRC

Mais c'est ... un peu laid... on est loin d'un DSL.

* Utilisation de macro

#+BEGIN_SRC elixir
  defmacro my_unless(predicate, do: expression) do
    quote do
      if(! unquote(predicate), do: unquote(expression))
    end
  end
#+END_SRC

#+BEGIN_SRC elixir
iex(9)> require Sample
iex(10)> Sample.my_unless false, do: IO.puts "foo"
foo
:ok

iex(11)> Sample.my_unless true, do: IO.puts "foo"
nil # Victoire Réelle !

#+END_SRC


* Un autre exemple : overloading

#+BEGIN_SRC elixir

defmodule Sample do
  def x + y, do: [x, y]
  def x - y, do: [y, x]
end

test "Test for +" do
  import Sample
  assert (1 + 2) == [1, 2]
  assert (1 - 2) == [2, 1]
end

#+END_SRC


*  

#+BEGIN_SRC elixir
== Compilation error in file test/sample_test.exs ==
** (CompileError) test/sample_test.exs:8: function +/2 imported from both 
                  Sample and Kernel, call is ambiguous
    (ex_unit) expanding macro: ExUnit.Assertions.assert/1
    test/sample_test.exs:8: SampleTest."test Test for +"/1
    (elixir) lib/code.ex:767: Code.require_file/2
    (elixir) lib/kernel/parallel_compiler.ex:211: anonymous fn/4 in 
              Kernel.ParallelCompiler.spawn_workers/6
#+END_SRC

* Solution 

#+BEGIN_SRC elixir
test "Test for +" do
  import Kernel, except: [+: 2, -: 2]
  import Sample
  assert (1 + 2) == [1, 2]
  assert (1 - 2) == [2, 1]
end
#+END_SRC

* 

#+BEGIN_LaTeX 
\begin{center}
\Huge Utilisons nos super-pouvoirs !
\end{center}
#+END_LaTeX

* 

#+BEGIN_SRC elixir
defmacro overload(methods, from: a, with: b) do 
    quote do 
      import unquote(a), except: unquote(methods)
      import unquote(b), only: unquote(methods)
    end
end


test "simple overloading" do 
    import Scope 
    overload [+: 2, -: 2], from: Kernel, with: Test

    assert [2, [1, 3]] == (1 + 3 - 2)
end
#+END_SRC




* Et ... c'est une très mauvaise idée

- Altération de la syntaxe pour de la *featurite*

- Complexifie la compréhension du code pour une futilité (et ce n'est pas cool pour les 
  co-workers)

- L'utilisation de macros implique un raisonnement en amont !


* Gestion complexe d'unités de mesures

** On termine sur un exemple plus complexe !

- Pour un projet : manipulation de distances (m/cm/km) et de durée (sec/min/h/d)
- Rappel du projet *Mars Climate Orbiter* (+ de 50 millions partit en fumée)
- Très difficile de tester unitairement l'appartenance à un système métrique
- Tentative d'approche sans macro

*  

** Simulation de types fantômes (sans les garanties, mais testables)

#+BEGIN_SRC elixir

def cm(x), do: {:cm, x}

def add({base, x}, {base, y}), do: {base, x + y}
#+END_SRC

* 

** Enrichissement du système

#+BEGIN_SRC elixir

def cm(x), do: {:distance, :cm, x, 100.0}

def m(x), do: {:distance, :m, x, 1.0}

def add({base, ref, x, coeff1}, {base, _,  y, coeff2}) do 
   {base, ref, x + (y * (coeff1 / coeff2)), coeff1}
end
#+END_SRC

* 

#+BEGIN_LaTeX 
\begin{center}
\Huge Achievement unlocked ... sans macro !!!!
\end{center}
#+END_LaTeX

* 
#+BEGIN_LaTeX 
\begin{center}
\Huge (celsius * 1.8) + 32.0\newline
... lol, merci les farenheit's !
\end{center}
#+END_LaTeX

* Ici typiquement... les macros peuvent servir 

#+BEGIN_SRC elixir
defmodule Distance do 
  use Mizur.System
  type m
  type cm = m / 100 
  type mm = m / 1000 
  type km = m * 1000
end
#+END_SRC

* 

#+BEGIN_SRC elixir
defmodule Time do 
  use Mizur.System
  type sec
  type min  = sec * 60 
  type hour = sec * 60 * 60
  type day = sec * 60 * (60 * 24)
end
#+END_SRC

* 

#+BEGIN_SRC elixir
defmodule Temperature do 
  use Mizur.System, intensive: true
  type celsius
  type farenheit = (celsius * 1.8) + 32.0
end
#+END_SRC

* 

- Génération d'une API /typesafe/ pour des systèmes métriques
- grâce aux macros, l'expression arithmétique qui défini un type est inversée 
  pour offrir une conversion bi-directionnelle sans coût arithmétique complémentaire.

* Concrètement ?

- La méta-programmation est très facile à utiliser 
- Le mécanisme de macro est un outil puissant et robuste (et facile à utiliser)
- Intensivement utilisé dans Elixir (pour le langage, Ecto, Phoenix, Plug etc.)
- On peut être tenter d'en mettre partout... et c'est balot car : 
  - ça peut complexifier la lecture du code
  - le débogage 

* Quand s'en servir ? 

- Pour évincer du /boilerplate/ très lourd (par exemple, une requête SQL via des compréhensions)
- Pour maquiller la plomberie interne d'une bibliothèque.

* 


#+BEGIN_LaTeX 
\begin{center}
\Huge Merci ! 
\end{center}
#+END_LaTeX
